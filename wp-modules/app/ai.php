<?php
/**
 * Module Name: Ai
 * Description: Generate a new pattern using ai.
 * Namespace: Ai
 *
 * @package pattern-manager
 */

declare(strict_types=1);

namespace PatternManager\Ai;

function get_site_html() {
	if ( ! isset( $_GET['get_site_html'] ) ) {
		return;
	}
	
	$theme_json      = get_themejson_file();
	$core_theme_json = get_core_themejson_file();
	
	$default_color_pallete_identifiers = [
		'base' => __( 'Base', 'pattern-manager' ),
		'contrast' => __( 'Contrast', 'pattern-manager' ),
		'primary' => __( 'Primary', 'pattern-manager' ),
		'secondary' => __( 'Secondary', 'pattern-manager' ),
		'neutral' => __( 'Neutral', 'pattern-manager' ),
	];
	
	$url      = wp_unslash( sanitize_text_field( $_GET['get_site_html']  ) );
	$response = wp_remote_get( $url );
	$body     = wp_remote_retrieve_body( $response );
	
	// Extract any hexidecimal color codes
	preg_match_all('/="#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})"/', $body, $found_hex_codes_in_attributes_with_quotes);	
	preg_match_all('/=#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})/', $body, $found_hex_codes_in_attributes);	
	preg_match_all('/(?<!&)#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3});/', $body, $found_hex_codes_in_body);
	
	//$tags = new \WP_HTML_Tag_Processor($body);
	$found_hex_codes = array_merge( $found_hex_codes_in_attributes[1], $found_hex_codes_in_body[1], $found_hex_codes_in_attributes_with_quotes[1] );
	$found_hex_codes = array_values( array_unique( $found_hex_codes ) );

	// Remove any non-hexidecimal values;
	foreach ( $found_hex_codes as $key => $hex_code ) {		
		if ( trim($hex_code, '0..9A..Fa..f') !== '' ) {
			unset( $found_hex_codes[$key] );
		}
	}
	
	$found_hex_codes = array_values( array_unique( $found_hex_codes ) );

	// Remove any colors generated by WordPress, like "luminous-vidi-orange, SMH.
	$theme_json_colors = convert_color_pallete_to_array_of_color_values($theme_json['settings']['color']['palette']);
	foreach ( $found_hex_codes as $key => $hex_code ) {
		foreach( $core_theme_json['settings']['color']['palette'] as $core_pallete_item ) {
			if ('#' . $hex_code === $core_pallete_item['color'] ) {
				if ( ! in_array( '#' . $hex_code, $theme_json_colors ) ) {
					if ( $hex_code !== 'ffffff' && $hex_code !== '000000' ) {
						unset( $found_hex_codes[$key] );
					}
				}
			}
		}
	}
	
	$found_hex_codes = array_values( array_unique( $found_hex_codes ) );
	
	// Remove any duplicate colors that might be 3 characters instead of 6 (Like #000 vs #000000);
	foreach ( $found_hex_codes as $key => $hex_code ) {
		if ( strlen( $hex_code ) === 3 ) {
			$parts = str_split($hex_code);
			$rebuilt_hex_6_chars = $parts[0] . $parts[0] . $parts[1] . $parts[1] . $parts[2] . $parts[2];
			$found_hex_codes[$key] = $rebuilt_hex_6_chars;
		}
	}
	
	$found_hex_codes = array_values( array_unique( $found_hex_codes ) );

	// Re-order white and black to be at the start, if they exist.
	$found_hex_codes = bump_white_and_black_to_start_if_they_exist($found_hex_codes);
	
	$new_theme_json_color_palette = [];
	
	if ( ! $found_hex_codes ) {
		echo wp_json_encode( [
			'error'    => __( 'No colors found', 'pattern-manager' ),
			'response' => $response,
		] );
		die();
	}

	// Loop through each setting in the color palette and set the value to the colors found on the site.
	foreach ( $found_hex_codes as $iteration => $hex_code ) {
		// Use the pre-existing slug/name if it exists, and only update the color value.
		if ( isset( $theme_json['settings']['color']['palette'][$iteration] ) ) {
			$palette_item = $theme_json['settings']['color']['palette'][$iteration];
			$palette_item['color'] = '#' . $found_hex_codes[$iteration];
		} else {
			$fallback_palette_item = [
				'slug'  => $found_hex_codes[$iteration],
				'name'  => $found_hex_codes[$iteration],
				'color' => '#' . $found_hex_codes[$iteration],
			];
			foreach( $default_color_pallete_identifiers as $default_color_pallete_key => $default_color_pallete_label ) {
				$default_color_palette_key_used = false;
				foreach( $new_theme_json_color_palette as $new_theme_json_color_palette_item ) {
					if ( $default_color_pallete_key === $new_theme_json_color_palette_item['slug'] ) {
						// This default key was already used.
						$default_color_palette_key_used = true;
					}
				}
				if ( ! $default_color_palette_key_used ) {
					$fallback_palette_item['slug'] = $default_color_pallete_key;
					$fallback_palette_item['name'] = $default_color_pallete_label;
					break;
				}
			}
			// If there are more colors to add to theme.json than already exist, add new ones with simple number'd names/slug.
			$palette_item = $fallback_palette_item;
		}
		$new_theme_json_color_palette[$iteration] = $palette_item;
	}
	
	$theme_json['settings']['color']['palette'] = $new_theme_json_color_palette;
	
	//print_r( wp_json_encode( $theme_json['settings']['color']['palette'] ) );
	print_r( wp_json_encode( $theme_json, JSON_PRETTY_PRINT ) );
	
	write_themejson_file( $theme_json );
	die();
}
add_action( 'init', __NAMESPACE__ . '\get_site_html' );

function update_theme_json() {
	if ( ! isset( $_GET['update_theme_json'] ) ) {
		return;
	}
	
	$theme_json = json_decode( wp_unslash( sanitize_text_field( $_POST['themejson'] ) ), true );
	
	write_themejson_file( $theme_json );
	
	echo wp_json_encode( write_themejson_file( $theme_json ) );
	die();
	

}
add_action( 'init', __NAMESPACE__ . '\update_theme_json' );

function convert_color_pallete_to_array_of_color_values( $color_pallete_data ) {
	$colors_only = [];

	foreach ( $color_pallete_data as $palette_array ) {
		$colors_only[] = $palette_array['color'];
	}
	return $colors_only;
}

function get_core_themejson_file() {
	$wp_filesystem = \PatternManager\GetWpFilesystem\get_wp_filesystem_api();
	$core_theme_json_path = trailingslashit( ABSPATH ) . '/wp-includes/theme.json';
	$theme_json = json_decode( $wp_filesystem->get_contents( $core_theme_json_path ), true );
	return $theme_json;
}

function get_themejson_file() {
	$wp_filesystem = \PatternManager\GetWpFilesystem\get_wp_filesystem_api();
	$theme_json = json_decode( $wp_filesystem->get_contents( trailingslashit( get_template_directory() ) . 'theme.json' ), true );
	return $theme_json;
}

function write_themejson_file( $theme_json_array ) {
	$wp_filesystem = \PatternManager\GetWpFilesystem\get_wp_filesystem_api();

	$theme_json_file_created = $wp_filesystem->put_contents(
		trailingslashit( get_template_directory() ) . 'theme.json',
		wp_json_encode( $theme_json_array, JSON_PRETTY_PRINT ),
		FS_CHMOD_FILE
	);
	
	return $theme_json_file_created;
}

function bump_white_and_black_to_start_if_they_exist($array) {
	$colors = ['ffffff', '000000'];
	$result = [];
	
	// Add white and black colors to the start of the result array if they exist
	foreach ($colors as $color) {
	    if (in_array($color, $array)) {
		   $result[] = $color;
	    }
	}
	
	// Add the remaining colors to the result array
	foreach ($array as $color) {
	    if (!in_array($color, $result)) {
		   $result[] = $color;
	    }
	}
	
	return $result;
 }
 